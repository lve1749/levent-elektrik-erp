const { app, BrowserWindow, Menu } = require('electron');
  const path = require('path');
  const { spawn } = require('child_process');
  const http = require('http');

  let mainWindow;
  let nextServer;

  // Production build'de NODE_ENV set edilmediği için alternatif kontrol
const isDev = process.env.NODE_ENV === 'development' || (!app.isPackaged && process.env.NODE_ENV !== 'production');
  const port = process.env.PORT || 3000;

  // Server'ın hazır olmasını bekle
  async function waitForServer(url, maxAttempts = 30) {
    console.log(`Server bekleniyor: ${url}`);
    for (let i = 0; i < maxAttempts; i++) {
      try {
        return new Promise((resolve, reject) => {
          http.get(url, (res) => {
            // 200, 304, 307 (redirect) hepsini başarılı say
            if (res.statusCode === 200 || res.statusCode === 304 || res.statusCode === 307 || res.statusCode === 302) {
              console.log(`Server hazır! (Status: ${res.statusCode})`);
              resolve(true);
            } else {
              reject(new Error(`Status: ${res.statusCode}`));
            }
          }).on('error', (err) => {
            if (i === maxAttempts - 1) {
              reject(err);
            } else {
              setTimeout(() => {
                waitForServer(url, maxAttempts - i - 1)
                  .then(resolve)
                  .catch(reject);
              }, 1000);
            }
          });
        });
      } catch (e) {
        console.log(`Deneme ${i + 1}/${maxAttempts}: Server henüz hazır değil`);
        await new Promise(r => setTimeout(r, 1000));
      }
    }
    return false;
  }

  function createWindow() {
    mainWindow = new BrowserWindow({
      width: 1400,
      height: 900,
      webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        webSecurity: false, // Development'ta cookie sorunlarını önler
        partition: 'persist:leventelektrik' // Session'ı saklar
      },
      icon: process.platform === 'win32' 
        ? path.join(__dirname, '../public/icon.ico')
        : path.join(__dirname, '../public/icon.png'),
      show: false,
      title: 'Levent Elektrik'
    });

    mainWindow.once('ready-to-show', () => {
      mainWindow.show();
      if (isDev) {
        mainWindow.webContents.openDevTools();
      }
    });

    const url = `http://localhost:${port}`;

    // Server hazır olana kadar bekle
    waitForServer(url).then(() => {
      // Direkt login sayfasına git (redirect döngüsünü önler)
      const loginUrl = `${url}/login`;
      mainWindow.loadURL(loginUrl);
    }).catch((err) => {
      console.error('Server başlatılamadı:', err);
      app.quit();
    });

    mainWindow.on('closed', () => {
      mainWindow = null;
    });
  }

  function startNextServer() {
    // Development modunda Next.js'i başlatma
    if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'development ') {
      console.log('Development modunda - Next.js manuel başlatılmalı (npm run dev)');
      return;
    }
    
    // Sadece production/packaged durumda başlat
    if (!app.isPackaged) {
      console.log('Development modunda - Next.js manuel başlatılmalı');
      return;
    }
    
    // Production'da Next.js'i otomatik başlat
    console.log('Next.js production server başlatılıyor...');

    const command = 'start';
    
    nextServer = spawn('npm', ['run', command], {
      shell: true,
      env: { ...process.env, PORT: port },
      stdio: 'pipe',
      cwd: app.isPackaged ? process.resourcesPath + '/app' : process.cwd()
    });

    nextServer.stdout.on('data', (data) => {
      console.log(`Next.js: ${data}`);
    });

    nextServer.stderr.on('data', (data) => {
      console.error(`Next.js Error: ${data}`);
    });

    nextServer.on('close', (code) => {
      console.log(`Next.js server kapandı: ${code}`);
    });
  }

  app.whenReady().then(() => {
    // Native menüyü kaldır (File, Edit, View vs.)
    Menu.setApplicationMenu(null);
    
    startNextServer();

    // Server başlamasını bekle
    setTimeout(() => {
      createWindow();
    }, 3000);
  });

  app.on('window-all-closed', () => {
    if (nextServer) {
      nextServer.kill();
    }
    if (process.platform !== 'darwin') {
      app.quit();
    }
  });

  app.on('before-quit', () => {
    if (nextServer) {
      nextServer.kill();
    }
  });

  process.on('SIGTERM', () => {
    if (nextServer) {
      nextServer.kill();
    }
    app.quit();
  });